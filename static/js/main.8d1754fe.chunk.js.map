{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","reversField","setReversField","visibleGoods","goods","preparedGoods","sort","good1","good2","SORT_GOODS_NAME","localeCompare","SORT_GOODS_LENGTH","length","reverse","getPreparedGoods","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,uBAAAA,E,2BAAAA,E,YAAAA,M,KAsCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,SAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACMC,EA9BR,SACEC,EADF,GAEG,IADkBL,EACnB,EADmBA,UAAWE,EAC9B,EAD8BA,YAExBI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,gBACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,kBACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAcQ,UAGTR,EAMcS,CACnBnB,EAAiB,CAAEI,YAAWE,gBAOhC,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,WACPhB,EAAaN,EAASe,kBAExBQ,KAAK,SACLF,UACEG,IACE,SACA,UACA,CAAE,WAAYnB,IAAcL,EAASe,kBAT3C,iCAgBA,wBACEO,QAAS,WACPhB,EAAaN,EAASiB,oBAExBM,KAAK,SACLF,UACEG,IACE,SACA,aACA,CAAE,WAAYnB,IAAcL,EAASiB,oBAT3C,4BAgBA,wBACEK,QAAS,WACPd,GAAgBD,IAElBgB,KAAK,SACLF,UACEG,IACE,SACA,aACA,CAAE,YAAajB,IATrB,sBAgBEF,GAAaE,IACb,wBACEgB,KAAK,SACLF,UAAU,4BACVC,QA5DI,WACZhB,EAAaN,EAASI,SACtBI,GAAe,IAuDT,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YClIjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8d1754fe.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  SORT_GOODS_NAME = 'name',\n  SORT_GOODS_LENGTH = 'length',\n  DEFAULT = '',\n}\n\ninterface SortParams {\n  sortField: SortType,\n  reversField: boolean,\n}\n\nfunction getPreparedGoods(\n  goods: string[], { sortField, reversField }: SortParams,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.SORT_GOODS_NAME:\n          return good1.localeCompare(good2);\n\n        case SortType.SORT_GOODS_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.DEFAULT);\n  const [reversField, setReversField] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortField, reversField },\n  );\n  const reset = () => {\n    setSortField(SortType.DEFAULT);\n    setReversField(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => {\n            setSortField(SortType.SORT_GOODS_NAME);\n          }}\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-info',\n              { 'is-light': sortField !== SortType.SORT_GOODS_NAME },\n            )\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => {\n            setSortField(SortType.SORT_GOODS_LENGTH);\n          }}\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-success',\n              { 'is-light': sortField !== SortType.SORT_GOODS_LENGTH },\n            )\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => {\n            setReversField(!reversField);\n          }}\n          type=\"button\"\n          className={\n            cn(\n              'button',\n              'is-warning',\n              { 'is-light': !reversField },\n            )\n          }\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversField) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}